{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Iteracion de Arrays"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "val [2.+0.j 3.+0.j 4.+0.j]\n",
      "val [5.+0.j 6.+0.j 7.+0.j]\n",
      "val (2+0j)\n",
      "val (3+0j)\n",
      "val (4+0j)\n",
      "val (5+0j)\n",
      "val (6+0j)\n",
      "val (7+0j)\n"
     ]
    }
   ],
   "source": [
    "\n",
    "# creacion de arrays mediante funcion \"array\"\n",
    "\n",
    "import numpy as np\n",
    "\n",
    "\n",
    "a = np.array([2,3,4])\n",
    "\n",
    "# crea un array de dos dimensiones\n",
    "a = np.array([[2,3,4],[5,6,7]])\n",
    "# crea un array indicando el tipo\n",
    "a = np.array([[2,3,4],[5,6,7]],dtype=complex)\n",
    "\n",
    "# Iteracion con For\n",
    "for val in a:\n",
    "    print(\"val\", val)\n",
    "\n",
    "# iteracion mediante flat (aplana el arreglo a que sea de 1 dimension)\n",
    "for val in a.flat:\n",
    "    print(\"val\", val)\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
