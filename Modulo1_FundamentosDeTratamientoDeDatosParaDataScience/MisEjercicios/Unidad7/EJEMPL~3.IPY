{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Operaciones Estadisticas"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Funciones: \"suma\", \"minimo\", \"maximo\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "respSum= 373\n",
      "respMin= 4  posicion 6\n",
      "respMax= 100  posicion 0\n"
     ]
    }
   ],
   "source": [
    "\n",
    "import numpy as np\n",
    "\n",
    "x =np.array([\n",
    "    [100,5,6,52],\n",
    "    [80,65,4,61]\n",
    "])\n",
    "\n",
    "respSum = np.sum(x)\n",
    "respMin = np.min(x)\n",
    "respMinPos = np.argmin(x) # posicion del valor minimo\n",
    "respMax = np.max(x)\n",
    "respMaxPos = np.argmax(x) # posicion del valor maximo\n",
    "\n",
    "print(\"respSum=\",respSum)\n",
    "print(\"respMin=\",respMin, \" posicion\", respMinPos)\n",
    "print(\"respMax=\",respMax, \" posicion\",respMaxPos)\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Funcion \"mean\" (Media)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "media =  46.625\n",
      "mediaCols =  [90.  35.   5.  56.5]\n",
      "mediaRows =  [40.75 52.5 ]\n"
     ]
    }
   ],
   "source": [
    "\n",
    "# La media es la suma de todos los valores dividido para el numero de elementos\n",
    "\n",
    "import numpy as np\n",
    "\n",
    "\n",
    "x =np.array([\n",
    "    [100,5,6,52],\n",
    "    [80,65,4,61]\n",
    "])\n",
    "\n",
    "# media tomando todos los valores\n",
    "media = np.mean(x)\n",
    "\n",
    "# media por cada columns\n",
    "mediaCols = np.mean(x, axis=0)\n",
    "\n",
    "# media por cada fila\n",
    "mediaRows = np.mean(x, axis=1)\n",
    "\n",
    "print(\"media = \", media)\n",
    "print(\"mediaCols = \", mediaCols)\n",
    "print(\"mediaRows = \", mediaRows)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Funcion \"var\" (Varianza)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "varianza =  1216.984375\n",
      "varianzaCols =  [100.   900.     1.    20.25]\n",
      "varianzaRows =  [1530.6875  834.25  ]\n"
     ]
    }
   ],
   "source": [
    "# La \"Varianza\" representa la variabilidad de una seria de datos con respecto a su media\n",
    "\n",
    "import numpy as np\n",
    "\n",
    "\n",
    "x =np.array([\n",
    "    [100,5,6,52],\n",
    "    [80,65,4,61]\n",
    "])\n",
    "\n",
    "# varianza tomando todos los valores\n",
    "varianza = np.var(x)\n",
    "\n",
    "# varianza por cada columns\n",
    "varianzaCols = np.var(x, axis=0)\n",
    "\n",
    "# varianza por cada fila\n",
    "varianzaRows = np.var(x, axis=1)\n",
    "\n",
    "print(\"varianza = \", varianza)\n",
    "print(\"varianzaCols = \", varianzaCols)\n",
    "print(\"varianzaRows = \", varianzaRows)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Funcion \"std\" (Desviasion estandar)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "desviasionEstandar =  34.88530313756783\n",
      "desviasionEstandarCols =  [10.  30.   1.   4.5]\n",
      "desviasionEstandarRows =  [39.12400158 28.88338623]\n"
     ]
    }
   ],
   "source": [
    "# La \"Desviasion Estandar\" (es la raiz cuadrada de la varianza) sirve para \n",
    "# cuantificar la dispresion / variacion en un conjunto de \n",
    "# datos numericos \n",
    "\n",
    "import numpy as np\n",
    "\n",
    "\n",
    "x =np.array([\n",
    "    [100,5,6,52],\n",
    "    [80,65,4,61]\n",
    "])\n",
    "\n",
    "# Desviasion Estandar tomando todos los valores\n",
    "desviasionEstandar = np.std(x)\n",
    "\n",
    "# Desviasion Estandar por cada columns\n",
    "desviasionEstandarCols = np.std(x, axis=0)\n",
    "\n",
    "# Desviasion Estandar por cada fila\n",
    "desviasionEstandarRows = np.std(x, axis=1)\n",
    "\n",
    "print(\"desviasionEstandar = \", desviasionEstandar)\n",
    "print(\"desviasionEstandarCols = \", desviasionEstandarCols)\n",
    "print(\"desviasionEstandarRows = \", desviasionEstandarRows)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Funcion \"median\" (Mediana)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "mediana =  56.5\n",
      "medianaCols =  [90.  35.   5.  56.5]\n",
      "medianaRows =  [29. 63.]\n"
     ]
    }
   ],
   "source": [
    "# La \"Mediada\" representa el valor de la variable de posicion central en un \n",
    "# conjunto de datos\n",
    "\n",
    "import numpy as np\n",
    "\n",
    "\n",
    "x =np.array([\n",
    "    [100,5,6,52],\n",
    "    [80,65,4,61]\n",
    "])\n",
    "\n",
    "# Mediada tomando todos los valores\n",
    "mediana = np.median(x)\n",
    "\n",
    "# Mediada por cada columns\n",
    "medianaCols = np.median(x, axis=0)\n",
    "\n",
    "# Mediana por cada fila\n",
    "medianaRows = np.median(x, axis=1)\n",
    "\n",
    "print(\"mediana = \", mediana)\n",
    "print(\"medianaCols = \", medianaCols)\n",
    "print(\"medianaRows = \", medianaRows)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Funcion \"corrcoef\" (Correlacion)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "correlacion =  [[1.         0.65562207]\n",
      " [0.65562207 1.        ]]\n"
     ]
    }
   ],
   "source": [
    "# La \"Correlacion\" dadas dos variables aleatorias, este coeficiente indica si estan relacionadas\n",
    "# o no\n",
    "\n",
    "\n",
    "import numpy as np\n",
    "\n",
    "\n",
    "x =np.array([\n",
    "    [100,5,6,52],\n",
    "    [80,65,4,61]\n",
    "])\n",
    "\n",
    "# correlacion (cada fila del array representa una variable)\n",
    "correlacion = np.corrcoef(x)\n",
    "\n",
    "print(\"correlacion = \", correlacion)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Funcion \"cov\" (Covarianza)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "covarianza =  [[2040.91666667  987.83333333]\n",
      " [ 987.83333333 1112.33333333]]\n",
      "covarianzaCols =  200.0\n",
      "covarianzaRows =  2040.9166666666665\n"
     ]
    }
   ],
   "source": [
    "# La \"Covarianza\" determina si existe dependencia entre 2 variables aleatorias\n",
    "\n",
    "\n",
    "import numpy as np\n",
    "\n",
    "\n",
    "x =np.array([\n",
    "    [100,5,6,52],\n",
    "    [80,65,4,61]\n",
    "])\n",
    "\n",
    "# covarianza\n",
    "covarianza = np.cov(x)\n",
    "# covarianza de la primera columna\n",
    "covarianzaCols = np.cov(x[:,0])\n",
    "# covarianza de la primera fila\n",
    "covarianzaRows = np.cov(x[0,:])\n",
    "\n",
    "\n",
    "print(\"covarianza = \", covarianza)\n",
    "print(\"covarianzaCols = \", covarianzaCols)\n",
    "print(\"covarianzaRows = \", covarianzaRows)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Metodos aleatorios"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "x= [0.52431733 0.18647197 0.11771393 0.71313649 0.63631752 0.02144622\n",
      " 0.12656249 0.40735176 0.28116693 0.28553067]\n",
      "y= [[ 0.83932125  1.38168768]\n",
      " [-0.03610519  0.95650116]\n",
      " [-1.15501262  1.6064347 ]\n",
      " [-0.57547452 -0.49082585]\n",
      " [-0.74261318  2.51396839]]\n",
      "z= 1.3385815563179886\n"
     ]
    }
   ],
   "source": [
    "\n",
    "import numpy.random as r\n",
    "\n",
    "# genera los numeros aleatorios de una normal  entre (0,1)\n",
    "# genera 10 numeros \n",
    "x = r.rand(10)\n",
    "print(\"x=\",x)\n",
    "\n",
    "# genera un array con numeros pertenecientes a una normal\n",
    "y = r.normal(size=(5,2))\n",
    "print(\"y=\",y)\n",
    "\n",
    "# genera un numero perteneciente a una normal\n",
    "z = r.normal()\n",
    "print(\"z=\",z)\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
