{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Manipulacion sobre un Arraya"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "funciones \"ravel\", \"shape\", \"reshape\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "x= [[ 2  3  4]\n",
      " [ 8  9 10]\n",
      " [26 35 44]]\n",
      "a= [ 2  3  4  8  9 10 26 35 44]\n",
      "a.ndim=  1\n",
      "a.dtype=  int64\n",
      "a.shape=  (9,)\n",
      "a.size=  9\n",
      "a.itemsize=  8\n"
     ]
    }
   ],
   "source": [
    "# \n",
    "\n",
    "import numpy as np\n",
    "\n",
    "\n",
    "x = np.array([[2,3,4],\n",
    "             [8,9,10],\n",
    "             [26,35,44]])\n",
    "\n",
    "\n",
    "#a=[]\n",
    "#a=np.empty(1)\n",
    "# aplana el array\n",
    "a = x.ravel()\n",
    "# coloca nuevas dimensiones\n",
    "#x.shape=(1,9)\n",
    "#a= x.reshape(1,9)\n",
    "#a=x\n",
    "\n",
    "\n",
    "print(\"x=\",x)\n",
    "print(\"a=\",a)\n",
    "print(\"a.ndim= \",a.ndim)\n",
    "print(\"a.dtype= \",a.dtype)\n",
    "print(\"a.shape= \",a.shape)\n",
    "print(\"a.size= \",a.size)\n",
    "print(\"a.itemsize= \",a.itemsize)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Fusionar 2 Arrays, funcion \"concatenate\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "x= [[ 2  3  4]\n",
      " [ 8  9 10]\n",
      " [26 35 44]]\n",
      "a= [[  2   3   4  12  13  14]\n",
      " [  8   9  10  18  19 110]\n",
      " [ 26  35  44 126 135 144]]\n",
      "a.ndim=  2\n",
      "a.dtype=  int64\n",
      "a.shape=  (3, 6)\n",
      "a.size=  18\n",
      "a.itemsize=  8\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "\n",
    "x = np.array([[2,3,4],\n",
    "             [8,9,10],\n",
    "             [26,35,44]])\n",
    "\n",
    "y = np.array([[12,13,14],\n",
    "             [18,19,110],\n",
    "             [126,135,144]])\n",
    "\n",
    "# axis = 0 -> concatena para abajo (columnas)\n",
    "# axis = 1 -> concatena horizontalmente (filas)\n",
    "a= np.concatenate((x,y),axis=1)\n",
    "\n",
    "print(\"a=\",a)\n",
    "print(\"a.ndim= \",a.ndim)\n",
    "print(\"a.dtype= \",a.dtype)\n",
    "print(\"a.shape= \",a.shape)\n",
    "print(\"a.size= \",a.size)\n",
    "print(\"a.itemsize= \",a.itemsize)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Division de un Array"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[  2]\n",
      " [200]\n",
      " [ 26]]\n",
      "[[  2   3   4]\n",
      " [200   9  10]\n",
      " [ 26  35  44]]\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "\n",
    "x = np.array([[2,3,4],\n",
    "             [8,9,10],\n",
    "             [26,35,44]])\n",
    "\n",
    "# divide de manera horizontal\n",
    "hsplit = np.hsplit(x,3)\n",
    "# divide de manera vertical\n",
    "vsplit = np.vsplit(x,3)\n",
    "\n",
    "# se obtiene la posicion 0 del arreglo de \"Arrays\"\n",
    "print(hsplit[0])\n",
    "# se actualiza el valor [0][1], OJO que esta actualizacion\n",
    "# tambien afecta al array original (x)\n",
    "hsplit[0][1]=200\n",
    "print(x)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Division de un Array (Descomponer el Array)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[2 3 4]\n",
      "[ 8  9 10]\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "\n",
    "x = np.array([[2,3,4],\n",
    "             [8,9,10]])\n",
    "\n",
    "# se lo descompone por filas y en partes iguales\n",
    "b,c = x\n",
    "\n",
    "print(b)\n",
    "print(c)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Le metodo \"View\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "x= [[ 2  3  4]\n",
      " [ 8  9 10]]\n",
      "a= [[ 2  3  4]\n",
      " [ 8  9 10]]\n",
      "x= [[  2 200   4]\n",
      " [  8   9  10]]\n",
      "a= [[  2 200   4]\n",
      " [  8   9  10]]\n"
     ]
    }
   ],
   "source": [
    "# crea un nuevo array (vista) en base al array original\n",
    "# el array original se ve afectado por los cambios sobre la vista\n",
    "\n",
    "import numpy as np\n",
    "\n",
    "x = np.array([[2,3,4],\n",
    "             [8,9,10]])\n",
    "\n",
    "# se crea la vista\n",
    "a = x.view()\n",
    "\n",
    "\n",
    "print(\"x=\",x)\n",
    "print(\"a=\",a)\n",
    "\n",
    "# se cambia un valor a la vista (este cambio debe afecar tambien a \"x\")\n",
    "a[0][1]=200\n",
    "\n",
    "print(\"x=\",x)\n",
    "print(\"a=\",a)\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "EL Metodo \"Copy\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "x= [[ 2  3  4]\n",
      " [ 8  9 10]]\n",
      "a= [[ 2  3  4]\n",
      " [ 8  9 10]]\n",
      "x= [[ 2  3  4]\n",
      " [ 8  9 10]]\n",
      "a= [[  2 200   4]\n",
      " [  8   9  10]]\n"
     ]
    }
   ],
   "source": [
    "# crea una copia independiente en base al array original\n",
    "# el array original NO se ve afectado por los cambios sobre la copia\n",
    "\n",
    "import numpy as np\n",
    "\n",
    "x = np.array([[2,3,4],\n",
    "             [8,9,10]])\n",
    "\n",
    "# se crea la vista\n",
    "a = x.copy()\n",
    "\n",
    "\n",
    "print(\"x=\",x)\n",
    "print(\"a=\",a)\n",
    "\n",
    "# se cambia un valor a la vista (este cambio debe afecar tambien a \"x\")\n",
    "a[0][1]=200\n",
    "\n",
    "print(\"x=\",x)\n",
    "print(\"a=\",a)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "El Metodo \"sort\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "x [[ 8 31  1]\n",
      " [12 91  4]]\n"
     ]
    }
   ],
   "source": [
    "# ordena los arrays\n",
    "# para los arrays multidimensionales se debe indicar la dimension que se desea ordenar\n",
    "\n",
    "import numpy as np\n",
    "\n",
    "x = np.array([[12,31,4],\n",
    "             [8,91,1]])\n",
    "\n",
    "# se ordena todo el array por filas\n",
    "#x.sort()\n",
    "\n",
    "# se crea la vista\n",
    "x.sort(0)\n",
    "\n",
    "print(\"x\",x)\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Metodos \"any\" y \"all\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "x.any() True\n",
      "x.all() False\n"
     ]
    }
   ],
   "source": [
    "\n",
    "# son para trabajar con arreglos de booleanos\n",
    "# \"any()\" valida si algun valor del array es TRUE\n",
    "# \"all\" valida si todos los valores del array son TRUE\n",
    "\n",
    "import numpy as np\n",
    "\n",
    "x = np.array([True,False,False])\n",
    "\n",
    "print(\"x.any()\",x.any())\n",
    "print(\"x.all()\",x.all())\n",
    "\n",
    "\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
