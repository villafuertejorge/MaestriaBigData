{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Creacion de Arrays"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Funcion \"array\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "a= [[2 3 4]\n",
      " [5 6 7]]\n",
      "a.ndim=  2\n",
      "a.dtype=  int64\n",
      "a.shape=  (2, 3)\n",
      "a.size=  6\n",
      "a.itemsize=  8\n"
     ]
    }
   ],
   "source": [
    "# creacion de arrays mediante funcion \"array\"\n",
    "\n",
    "import numpy as np\n",
    "\n",
    "\n",
    "a = np.array([2,3,4])\n",
    "\n",
    "# crea un array de dos dimensiones\n",
    "a = np.array([[2,3,4],[5,6,7]])\n",
    "# crea un array indicando el tipo\n",
    "a = np.array([[2,3,4],[5,6,7]],dtype=complex)\n",
    "\n",
    "\n",
    "print(\"a=\",a)\n",
    "print(\"a.ndim= \",a.ndim)\n",
    "print(\"a.dtype= \",a.dtype)\n",
    "print(\"a.shape= \",a.shape)\n",
    "print(\"a.size= \",a.size)\n",
    "print(\"a.itemsize= \",a.itemsize)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Funcion \"arange\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "a= [1 3 5 7 9]\n",
      "a.ndim=  1\n",
      "a.dtype=  int64\n",
      "a.shape=  (5,)\n",
      "a.size=  5\n",
      "a.itemsize=  8\n"
     ]
    }
   ],
   "source": [
    "# creacion de arrays mediante funcion \"arange\"\n",
    "\n",
    "import numpy as np\n",
    "\n",
    "# genera un array en base a una secuencia de numeros\n",
    "# 1 -> numero inicial\n",
    "# 10 -> numero final\n",
    "# 2 -> salto entre numeros\n",
    "a= np.arange(1,10,2)\n",
    "\n",
    "print(\"a=\",a)\n",
    "print(\"a.ndim= \",a.ndim)\n",
    "print(\"a.dtype= \",a.dtype)\n",
    "print(\"a.shape= \",a.shape)\n",
    "print(\"a.size= \",a.size)\n",
    "print(\"a.itemsize= \",a.itemsize)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "funcion reshape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "a= [[ 1  3]\n",
      " [ 5  7]\n",
      " [ 9 11]]\n",
      "a.ndim=  2\n",
      "a.dtype=  int64\n",
      "a.shape=  (3, 2)\n",
      "a.size=  6\n",
      "a.itemsize=  8\n"
     ]
    }
   ],
   "source": [
    "# redimenciona un array generado mediante \"arange\"\n",
    "\n",
    "import numpy as np\n",
    "\n",
    "\n",
    "a= np.arange(1,12,2)\n",
    "# redimensiona el array geneado, las nuevas dimensiones deben tener coherencia con los\n",
    "# valores generados (para que cuadren)\n",
    "a= a.reshape(3,2)\n",
    "\n",
    "print(\"a=\",a)\n",
    "print(\"a.ndim= \",a.ndim)\n",
    "print(\"a.dtype= \",a.dtype)\n",
    "print(\"a.shape= \",a.shape)\n",
    "print(\"a.size= \",a.size)\n",
    "print(\"a.itemsize= \",a.itemsize)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "funcion linspace"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "a= [ 1.          2.28571429  3.57142857  4.85714286  6.14285714  7.42857143\n",
      "  8.71428571 10.        ]\n",
      "a.ndim=  1\n",
      "a.dtype=  float64\n",
      "a.shape=  (8,)\n",
      "a.size=  8\n",
      "a.itemsize=  8\n"
     ]
    }
   ],
   "source": [
    "# generacion de array con linspace\n",
    "# se usa esta funcion cuando el array contiene numeros reales\n",
    "\n",
    "import numpy as np\n",
    "\n",
    "\n",
    "# 1 -> numero inicial\n",
    "# 10 -> numero final\n",
    "# 8 -> cuantos numeros va a generar\n",
    "a= np.linspace(1,10,8)\n",
    "\n",
    "print(\"a=\",a)\n",
    "print(\"a.ndim= \",a.ndim)\n",
    "print(\"a.dtype= \",a.dtype)\n",
    "print(\"a.shape= \",a.shape)\n",
    "print(\"a.size= \",a.size)\n",
    "print(\"a.itemsize= \",a.itemsize)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "funcion rand"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "a= [[0.80639093 0.09572121]\n",
      " [0.92069583 0.1876191 ]\n",
      " [0.30337786 0.05723873]\n",
      " [0.43579705 0.62520939]\n",
      " [0.40875663 0.88236135]\n",
      " [0.46119238 0.10872548]\n",
      " [0.2392423  0.06500186]\n",
      " [0.98610489 0.79452557]\n",
      " [0.03315637 0.73286143]\n",
      " [0.13450648 0.07853882]]\n",
      "a.ndim=  2\n",
      "a.dtype=  float64\n",
      "a.shape=  (10, 2)\n",
      "a.size=  20\n",
      "a.itemsize=  8\n"
     ]
    }
   ],
   "source": [
    "# generacion de arrays con numeros aleatorios \n",
    "# los valores que genera la funcion \"rand\" son del intervalo [0,1]\n",
    "import numpy as np\n",
    "\n",
    "\n",
    "# genera arreglo unidimencional de 10 valores\n",
    "a= np.random.rand(10)\n",
    "# genera arreglo multimencional (10,2)\n",
    "a= np.random.rand(10,2)\n",
    "\n",
    "print(\"a=\",a)\n",
    "print(\"a.ndim= \",a.ndim)\n",
    "print(\"a.dtype= \",a.dtype)\n",
    "print(\"a.shape= \",a.shape)\n",
    "print(\"a.size= \",a.size)\n",
    "print(\"a.itemsize= \",a.itemsize)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "funciones espaciales: zeros, ones, empty"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "a= [[2. 0. 3.]\n",
      " [0. 4. 0.]\n",
      " [5. 0. 6.]\n",
      " [0. 7. 0.]]\n",
      "a.ndim=  2\n",
      "a.dtype=  float64\n",
      "a.shape=  (4, 3)\n",
      "a.size=  12\n",
      "a.itemsize=  8\n"
     ]
    }
   ],
   "source": [
    "# generacion de arrays mediante funciones especiales\n",
    "import numpy as np\n",
    "\n",
    "\n",
    "# genera array con ceros (4)-> 4 ceros 1 dimension\n",
    "# [4,5] -> multidimencion\n",
    "a= np.zeros([4,5])\n",
    "# genera arrays lleno de 1\n",
    "a= np.ones([4,5])\n",
    "# genera arrays con valores aleatorios\n",
    "a= np.empty([4,3])\n",
    "\n",
    "\n",
    "\n",
    "print(\"a=\",a)\n",
    "print(\"a.ndim= \",a.ndim)\n",
    "print(\"a.dtype= \",a.dtype)\n",
    "print(\"a.shape= \",a.shape)\n",
    "print(\"a.size= \",a.size)\n",
    "print(\"a.itemsize= \",a.itemsize)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
