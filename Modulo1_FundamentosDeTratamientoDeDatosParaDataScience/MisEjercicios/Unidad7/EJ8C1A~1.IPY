{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Acceso a Arrays"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Acceso a Arrays Unidimensionales"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "x= [ 1  2  3  4  5  6  7  8  9 10]\n",
      "x= [ 0  2  0  4  0  6  7  8  9 10]\n",
      "a= [0 0 0]\n",
      "a.ndim=  1\n",
      "a.dtype=  int64\n",
      "a.shape=  (3,)\n",
      "a.size=  3\n",
      "a.itemsize=  8\n"
     ]
    }
   ],
   "source": [
    "# formato para obtener el subgrupo \n",
    "# a:b:c\n",
    "# a -> posicion incial del subgrupo\n",
    "# b -> posicion final (excluyente) del subgrupo (si es vacia a::c es hasta el final)\n",
    "# c -> salto de posiciones entre cada elemento \n",
    "# OJO -> cualquier actualizacion de un subgrupo tambien modifica el array original\n",
    "\n",
    "import numpy as np\n",
    "\n",
    "x = np.array([1,2,3,4,5,6,7,8,9,10])\n",
    "print(\"x=\",x)\n",
    "\n",
    "a=x[0:5:2]\n",
    "# seleccina todos los elementos y los pone cero\n",
    "# esta acualizacion tambian modifica las posiciones del array original\n",
    "a[::]=0\n",
    "print(\"x=\",x)\n",
    "\n",
    "print(\"a=\",a)\n",
    "print(\"a.ndim= \",a.ndim)\n",
    "print(\"a.dtype= \",a.dtype)\n",
    "print(\"a.shape= \",a.shape)\n",
    "print(\"a.size= \",a.size)\n",
    "print(\"a.itemsize= \",a.itemsize)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Acceso a Arrays Multidimencional"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "x= [[ 1  2  3  4  5]\n",
      " [ 6  7  8  9 10]\n",
      " [11 12 13 14 15]]\n",
      "a= [ 1  6 11]\n",
      "a.ndim=  1\n",
      "a.dtype=  int64\n",
      "a.shape=  (3,)\n",
      "a.size=  3\n",
      "a.itemsize=  8\n"
     ]
    }
   ],
   "source": [
    "# el acceso se lo hace indicando los indices separados por coma\n",
    "\n",
    "import numpy as np\n",
    "\n",
    "x = np.array([\n",
    "                [1,2,3,4,5],\n",
    "                [6,7,8,9,10],\n",
    "                [11,12,13,14,15]\n",
    "             ])\n",
    "print(\"x=\",x)\n",
    "\n",
    "# x[fila, columna]\n",
    "a = x[1,3]\n",
    "# x[fila de la 0 a la 1, columna 0]\n",
    "# x[0:,0] -> \"0:\" filas de la 0 hasta el final\n",
    "a = x[0:,0]\n",
    "\n",
    "# cuando no se indica un indice de dimension, se obtiene todos los valores de la \n",
    "# dimension no indicada\n",
    "# x[0] -> no se indica dimencion para columnas, trae todas las columnas de la fila 0\n",
    "a = x[0]\n",
    "# x[:,0] -> no se indica dimension para filas, trae todas las filas de la columna 0\n",
    "a = x[:,0]\n",
    "\n",
    "\n",
    "\n",
    "print(\"a=\",a)\n",
    "print(\"a.ndim= \",a.ndim)\n",
    "print(\"a.dtype= \",a.dtype)\n",
    "print(\"a.shape= \",a.shape)\n",
    "print(\"a.size= \",a.size)\n",
    "print(\"a.itemsize= \",a.itemsize)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Acceso mediante mascaras"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "x= [[11 22 33 44 55]\n",
      " [ 6  7  8  9 10]\n",
      " [11 12 13 14 15]]\n",
      "a= [11  6 11]\n",
      "a.ndim=  1\n",
      "a.dtype=  int64\n",
      "a.shape=  (3,)\n",
      "a.size=  3\n",
      "a.itemsize=  8\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "\n",
    "x = np.array([\n",
    "                [11,22,33,44,55],\n",
    "                [6,7,8,9,10],\n",
    "                [11,12,13,14,15]\n",
    "            ])\n",
    "\n",
    "# otra forma es crearse un arreglo de booleanos para que es la mascara \n",
    "# que se aplicara para obtener los valores\n",
    "x1 = np.array([\n",
    "                [True,False,False,False,False],\n",
    "                [True,False,False,False,False],\n",
    "                [True,False,False,False,False]\n",
    "            ])\n",
    "\n",
    "\n",
    "print(\"x=\",x)\n",
    "\n",
    "# otra forma de crear el arreglo para la mascara\n",
    "# se guian por el valor mas no por la posicion\n",
    "mascara = (x>44) & (x<66)\n",
    "\n",
    "a = x[x1]\n",
    "\n",
    "print(\"a=\",a)\n",
    "print(\"a.ndim= \",a.ndim)\n",
    "print(\"a.dtype= \",a.dtype)\n",
    "print(\"a.shape= \",a.shape)\n",
    "print(\"a.size= \",a.size)\n",
    "print(\"a.itemsize= \",a.itemsize)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
